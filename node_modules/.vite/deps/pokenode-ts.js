import {
  __publicField
} from "./chunk-GKWPUQBP.js";

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i3;
  let l3;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i3 = 0, l3 = obj.length; i3 < l3; i3++) {
      fn.call(null, obj[i3], i3, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i3 = 0; i3 < len; i3++) {
      key = keys[i3];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i3 = keys.length;
  let _key;
  while (i3-- > 0) {
    _key = keys[i3];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i3 = 0, l3 = arguments.length; i3 < l3; i3++) {
    arguments[i3] && forEach(arguments[i3], assignValue);
  }
  return result;
}
var extend = (a2, b3, thisArg, { allOwnKeys } = {}) => {
  forEach(b3, (val, key) => {
    if (thisArg && isFunction(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i3;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i3 = props.length;
    while (i3-- > 0) {
      prop = props[i3];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i3 = thing.length;
  if (!isNumber(i3))
    return null;
  const arr = new Array(i3);
  while (i3-- > 0) {
    arr[i3] = thing[i3];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m3, p1, p22) {
      return p1.toUpperCase() + p22;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i3) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i3] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i3 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i3] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i3) {
    token = removeBrackets(token);
    return !dots && i3 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h3) {
      if (h3 !== null) {
        fn(h3);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i3;
  const len = keys.length;
  let key;
  for (i3 = 0; i3 < len; i3++) {
    key = keys[i3];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e3) {
      if (e3.name !== "SyntaxError") {
        throw e3;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e3) {
        if (strictJSONParsing) {
          if (e3.name === "SyntaxError") {
            throw AxiosError_default.from(e3, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e3;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i3;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i3 = line.indexOf(":");
    key = line.substring(0, i3).trim().toLowerCase();
    val = line.substring(i3 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w3, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i3 = keys.length;
    let deleted = false;
    while (i3--) {
      const key = keys[i3];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = browser_default.isStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        const cookie = [];
        cookie.push(name + "=" + encodeURIComponent(value));
        if (utils_default.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils_default.isString(path)) {
          cookie.push("path=" + path);
        }
        if (utils_default.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      },
      read: function read(name) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    };
  }()
) : (
  // Non standard browser env (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return {
      write: function write() {
      },
      read: function read() {
        return null;
      },
      remove: function remove() {
      }
    };
  }()
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv2() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv2() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i3 = tail;
    let bytesCount = 0;
    while (i3 !== head) {
      bytesCount += bytes[i3++];
      i3 = i3 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e3) => {
    const loaded = e3.loaded;
    const total = e3.lengthComputable ? e3.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e3
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData)) {
      if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType("multipart/form-data;", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e3) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i3 = 0; i3 < length; i3++) {
      nameOrAdapter = adapters[i3];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          "ERR_NOT_SUPPORT"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError("adapter is not a function");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b3, caseless) {
    if (!utils_default.isUndefined(b3)) {
      return getMergedValue(a2, b3, caseless);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2, caseless);
    }
  }
  function valueFromConfig2(a2, b3) {
    if (!utils_default.isUndefined(b3)) {
      return getMergedValue(void 0, b3);
    }
  }
  function defaultToConfig2(a2, b3) {
    if (!utils_default.isUndefined(b3)) {
      return getMergedValue(void 0, b3);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b3, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b3);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b3) => mergeDeepProperties(headersToObject(a2), headersToObject(b3), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.4.0";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i3) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i3 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i3 = keys.length;
  while (i3-- > 0) {
    const opt = keys[i3];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i3 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i3 < len) {
        promise = promise.then(chain[i3++], chain[i3++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i3 = 0;
    while (i3 < len) {
      const onFulfilled = requestInterceptorChain[i3++];
      const onRejected = requestInterceptorChain[i3++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i3 = 0;
    len = responseInterceptorChain.length;
    while (i3 < len) {
      promise = promise.then(responseInterceptorChain[i3++], responseInterceptorChain[i3++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i3 = token._listeners.length;
      while (i3-- > 0) {
        token._listeners[i3](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c3) {
      cancel = c3;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/cache-parser/dist/index.mjs
var e = Symbol("cache-parser");
function a(e3) {
  return ("string" == typeof e3 || "number" == typeof e3) && (e3 = Number(e3)) >= 0 && e3 < Infinity;
}
function r(e3) {
  return true === e3 || "number" == typeof e3 || "string" == typeof e3 && "false" !== e3;
}
var t = Number;
function s(s3) {
  var n3 = Object.defineProperty({}, e, { enumerable: false, value: 1 });
  if (!s3 || "string" != typeof s3)
    return n3;
  var i3 = function(e3) {
    var a2 = {}, r5 = e3.toLowerCase().replace(/\s+/g, "").split(",");
    for (var t3 in r5) {
      var s4, n4 = r5[t3].split("=", 2);
      a2[n4[0]] = null == (s4 = n4[1]) || s4;
    }
    return a2;
  }(s3), u3 = i3["max-age"], l3 = i3["max-stale"], o3 = i3["min-fresh"], m3 = i3["s-maxage"], p3 = i3["stale-if-error"], h3 = i3["stale-while-revalidate"];
  return r(i3.immutable) && (n3.immutable = true), a(u3) && (n3.maxAge = t(u3)), a(l3) && (n3.maxStale = t(l3)), a(o3) && (n3.minFresh = t(o3)), r(i3["must-revalidate"]) && (n3.mustRevalidate = true), r(i3["must-understand"]) && (n3.mustUnderstand = true), r(i3["no-cache"]) && (n3.noCache = true), r(i3["no-store"]) && (n3.noStore = true), r(i3["no-transform"]) && (n3.noTransform = true), r(i3["only-if-cached"]) && (n3.onlyIfCached = true), r(i3.private) && (n3.private = true), r(i3["proxy-revalidate"]) && (n3.proxyRevalidate = true), r(i3.public) && (n3.public = true), a(m3) && (n3.sMaxAge = t(m3)), a(p3) && (n3.staleIfError = t(p3)), a(h3) && (n3.staleWhileRevalidate = t(h3)), n3;
}

// node_modules/fast-defer/dist/index.mjs
var r2 = Symbol();
function e2() {
  var e3, n3, o3 = new Promise(function(r5, o4) {
    e3 = r5, n3 = o4;
  });
  return o3.resolve = e3, o3.reject = n3, o3[r2] = 1, o3;
}

// node_modules/object-code/dist/index.mjs
function r3(t3) {
  var n3 = typeof t3;
  if (t3 && "object" === n3 && !(t3 instanceof Date || t3 instanceof RegExp)) {
    for (var e3 = Array.isArray(t3) ? [] : {}, o3 = Object.keys(t3).sort(function(r5, t4) {
      return r5 > t4 ? 1 : -1;
    }), i3 = o3.length; i3--; ) {
      var a2 = o3[i3];
      e3[a2] = r3(t3[a2]);
    }
    return String(t3.constructor) + JSON.stringify(e3, o3);
  }
  return n3 + String(t3);
}
function t2(t3) {
  t3 = r3(t3);
  for (var n3 = 5381, e3 = 0; e3 < t3.length; )
    n3 = 33 * n3 ^ t3.charCodeAt(e3++);
  return n3;
}

// node_modules/axios-cache-interceptor/dist/index.mjs
var r4 = { d: (e3, t3) => {
  for (var a2 in t3)
    r4.o(t3, a2) && !r4.o(e3, a2) && Object.defineProperty(e3, a2, { enumerable: true, get: t3[a2] });
}, o: (e3, t3) => Object.prototype.hasOwnProperty.call(e3, t3) };
var s2 = {};
r4.d(s2, { h4: () => n, UN: () => A, uu: () => b, Kd: () => S, ZF: () => T, nv: () => y, p: () => f, E7: () => d, NQ: () => i, xK: () => E, G6: () => h, LN: () => v, Bw: () => I, Ad: () => u, $k: () => m, v8: () => O, Jk: () => g, tI: () => p, iS: () => l });
var o = ((e3) => {
  var t3 = {};
  return r4.d(t3, e3), t3;
})({ parse: () => s });
var n = Object.freeze({ IfModifiedSince: "if-modified-since", LastModified: "last-modified", IfNoneMatch: "if-none-match", CacheControl: "cache-control", Pragma: "pragma", ETag: "etag", Expires: "expires", Age: "age", XAxiosCacheEtag: "x-axios-cache-etag", XAxiosCacheLastModified: "x-axios-cache-last-modified", XAxiosCacheStaleIfError: "x-axios-cache-stale-if-error" });
var i = (e3) => {
  if (!e3)
    return "not enough headers";
  const t3 = e3[n.CacheControl];
  if (t3) {
    const { noCache: a3, noStore: r5, maxAge: s3, maxStale: i3, immutable: c3, staleWhileRevalidate: d3 } = (0, o.parse)(String(t3));
    if (a3 || r5)
      return "dont cache";
    if (c3)
      return { cache: 31536e6 };
    if (void 0 !== s3) {
      const t4 = e3[n.Age];
      return { cache: t4 ? 1e3 * (s3 - Number(t4)) : 1e3 * s3, stale: void 0 !== i3 ? 1e3 * i3 : void 0 !== d3 ? 1e3 * d3 : void 0 };
    }
  }
  const a2 = e3[n.Expires];
  if (a2) {
    const e4 = Date.parse(String(a2)) - Date.now();
    return e4 >= 0 ? { cache: e4 } : "dont cache";
  }
  return "not enough headers";
};
var c = ((e3) => {
  var t3 = {};
  return r4.d(t3, e3), t3;
})({ deferred: () => e2 });
function d(e3) {
  return e3 ? (t3) => e3(t3) || 304 === t3 : (e4) => e4 >= 200 && e4 < 300 || 304 === e4;
}
function u(e3 = "get", t3 = []) {
  return e3 = e3.toLowerCase(), t3.some((t4) => t4 === e3);
}
function l(e3, t3) {
  var a2;
  t3.headers || (t3.headers = {});
  const { etag: r5, modifiedSince: s3 } = t3.cache;
  if (r5) {
    const s4 = true === r5 ? null === (a2 = e3.data) || void 0 === a2 ? void 0 : a2.headers[n.ETag] : r5;
    s4 && (t3.headers[n.IfNoneMatch] = s4);
  }
  s3 && (t3.headers[n.IfModifiedSince] = true === s3 ? e3.data.headers[n.LastModified] || new Date(e3.createdAt).toUTCString() : s3.toUTCString());
}
function f(e3, t3) {
  return 304 === e3.status && t3 ? (e3.cached = true, e3.data = t3.data, e3.status = t3.status, e3.statusText = t3.statusText, e3.headers = Object.assign(Object.assign({}, t3.headers), e3.headers), t3) : { data: e3.data, status: e3.status, statusText: e3.statusText, headers: e3.headers };
}
function h(e3) {
  const t3 = async (t4) => {
    var a2, r5, s3, o3, i3, f3, h3, g3, p3, v3, m3, w3, y3, I3, S3;
    const b3 = t4.id = e3.generateKey(t4);
    if (false === t4.cache)
      return t4;
    if (t4.cache = Object.assign(Object.assign({}, e3.defaults.cache), t4.cache), t4.cache.cacheTakeover && (null !== (a2 = (v3 = t4.headers)[m3 = n.CacheControl]) && void 0 !== a2 || (v3[m3] = "no-cache"), null !== (r5 = (w3 = t4.headers)[y3 = n.Pragma]) && void 0 !== r5 || (w3[y3] = "no-cache"), null !== (s3 = (I3 = t4.headers)[S3 = n.Expires]) && void 0 !== s3 || (I3[S3] = "0")), !u(t4.method, t4.cache.methods))
      return t4;
    let x3 = await e3.storage.get(b3, t4);
    const C3 = t4.cache.override;
    e:
      if ("empty" === x3.state || "stale" === x3.state || C3) {
        if (e3.waiting[b3] && !C3 && (x3 = await e3.storage.get(b3, t4), "empty" !== x3.state)) {
          0;
          break e;
        }
        return e3.waiting[b3] = (0, c.deferred)(), e3.waiting[b3].catch(() => {
        }), await e3.storage.set(b3, { state: "loading", previous: C3 ? x3.data ? "stale" : "empty" : x3.state, data: x3.data, createdAt: C3 && !x3.createdAt ? Date.now() : x3.createdAt }, t4), "stale" === x3.state && l(x3, t4), t4.validateStatus = d(t4.validateStatus), ("stale" === x3.state || x3.data) && await (null === (i3 = (o3 = t4.cache).hydrate) || void 0 === i3 ? void 0 : i3.call(o3, x3)), t4;
      }
    let A2;
    if ("loading" === x3.state) {
      const a3 = e3.waiting[b3];
      if (!a3)
        return await e3.storage.remove(b3, t4), x3.data && await (null === (h3 = (f3 = t4.cache).hydrate) || void 0 === h3 ? void 0 : h3.call(f3, x3)), t4;
      0;
      try {
        A2 = await a3;
      } catch (e4) {
        return x3.data && await (null === (p3 = (g3 = t4.cache).hydrate) || void 0 === p3 ? void 0 : p3.call(g3, x3)), t4;
      }
    } else
      A2 = x3.data;
    return t4.adapter = () => Promise.resolve({ config: t4, data: A2.data, headers: A2.headers, status: A2.status, statusText: A2.statusText, cached: true, id: b3 }), t4;
  };
  return { onFulfilled: t3, apply: () => e3.interceptors.request.use(t3) };
}
async function g(e3, t3) {
  var a2;
  if ("function" == typeof t3)
    return t3(e3);
  const { statusCheck: r5, responseMatch: s3, containsHeaders: o3 } = t3;
  if (r5 && !await r5(e3.status) || s3 && !await s3(e3))
    return false;
  if (o3) {
    for (const [t4, r6] of Object.entries(o3))
      if (!await r6(null !== (a2 = e3.headers[t4.toLowerCase()]) && void 0 !== a2 ? a2 : e3.headers[t4]))
        return false;
  }
  return true;
}
async function p(e3, t3, a2) {
  if ("function" == typeof a2)
    return a2(t3);
  for (const [r5, s3] of Object.entries(a2)) {
    if ("delete" === s3) {
      await e3.remove(r5, t3.config);
      continue;
    }
    const a3 = await e3.get(r5, t3.config);
    if ("loading" === a3.state)
      continue;
    const o3 = await s3(a3, t3);
    "delete" !== o3 ? "ignore" !== o3 && await e3.set(r5, o3, t3.config) : await e3.remove(r5, t3.config);
  }
}
function v(e3) {
  const t3 = async (t4, a3) => {
    var r6;
    await e3.storage.remove(t4, a3), null === (r6 = e3.waiting[t4]) || void 0 === r6 || r6.reject(), delete e3.waiting[t4];
  }, a2 = async (a3) => {
    var r6, s3, o3;
    a3.config;
    const i3 = a3.id = null !== (r6 = (o3 = a3.config).id) && void 0 !== r6 ? r6 : o3.id = e3.generateKey(a3.config);
    if (null !== (s3 = a3.cached) && void 0 !== s3 || (a3.cached = false), a3.cached)
      return a3;
    const c3 = a3.config, d3 = c3.cache;
    if (!d3)
      return Object.assign(Object.assign({}, a3), { cached: false });
    if (d3.update && await p(e3.storage, a3, d3.update), !u(c3.method, d3.methods))
      return a3;
    const l3 = await e3.storage.get(i3, c3);
    if ("loading" !== l3.state)
      return a3;
    if (!l3.data && !await g(a3, d3.cachePredicate))
      return await t3(i3, c3), a3;
    for (const e4 of Object.keys(a3.headers))
      e4.startsWith("x-axios-cache") && delete a3.headers[e4];
    d3.etag && true !== d3.etag && (a3.headers[n.XAxiosCacheEtag] = d3.etag), d3.modifiedSince && (a3.headers[n.XAxiosCacheLastModified] = true === d3.modifiedSince ? "use-cache-timestamp" : d3.modifiedSince.toUTCString());
    let h3, v3 = d3.ttl || -1;
    if (d3.interpretHeader) {
      const r7 = e3.headerInterpreter(a3.headers);
      if ("dont cache" === r7)
        return await t3(i3, c3), a3;
      "not enough headers" !== r7 && ("number" == typeof r7 ? v3 = r7 : (v3 = r7.cache, h3 = r7.stale));
    }
    const m3 = f(a3, l3.data);
    "function" == typeof v3 && (v3 = await v3(a3)), d3.staleIfError && (a3.headers[n.XAxiosCacheStaleIfError] = String(v3));
    const w3 = { state: "cached", ttl: v3, staleTtl: h3, createdAt: Date.now(), data: m3 }, y3 = e3.waiting[i3];
    return y3 && (y3.resolve(w3.data), delete e3.waiting[i3]), await e3.storage.set(i3, w3, c3), a3;
  }, r5 = async (a3) => {
    var r6;
    const s3 = a3.config, i3 = s3.id, c3 = s3.cache, d3 = a3.response;
    if (!c3 || !i3)
      throw a3;
    if (!u(s3.method, c3.methods))
      throw a3;
    const l3 = await e3.storage.get(i3, s3);
    if ("loading" !== l3.state || "stale" !== l3.previous)
      throw await t3(i3, s3), a3;
    if (c3.staleIfError) {
      const t4 = String(null == d3 ? void 0 : d3.headers[n.CacheControl]), u3 = t4 && (0, o.parse)(t4).staleIfError, f3 = "function" == typeof c3.staleIfError ? await c3.staleIfError(d3, l3, a3) : true === c3.staleIfError && u3 ? 1e3 * u3 : c3.staleIfError;
      if (true === f3 || "number" == typeof f3 && l3.createdAt + f3 > Date.now())
        return null === (r6 = e3.waiting[i3]) || void 0 === r6 || r6.resolve(l3.data), delete e3.waiting[i3], await e3.storage.set(i3, { state: "stale", createdAt: Date.now(), data: l3.data }, s3), { cached: true, config: s3, id: i3, data: l3.data.data, headers: l3.data.headers, status: l3.data.status, statusText: l3.data.statusText };
    }
    throw a3;
  };
  return { onFulfilled: a2, onRejected: r5, apply: () => e3.interceptors.response.use(a2, r5) };
}
var m = (e3) => !!e3 && !!e3["is-storage"];
function w(e3) {
  const t3 = e3.data.headers;
  return n.ETag in t3 || n.LastModified in t3 || n.XAxiosCacheEtag in t3 || n.XAxiosCacheLastModified in t3;
}
function y(e3) {
  return !String(e3.data.headers[n.CacheControl]).includes("must-revalidate") && (!!w(e3) || "cached" === e3.state && void 0 !== e3.staleTtl && Math.abs(Date.now() - (e3.createdAt + e3.ttl)) <= e3.staleTtl);
}
function I(e3) {
  return void 0 !== e3.ttl && e3.createdAt + e3.ttl <= Date.now();
}
function S({ set: e3, find: t3, remove: a2 }) {
  return { "is-storage": 1, set: e3, remove: a2, get: async (r5, s3) => {
    let o3 = await t3(r5, s3);
    if (!o3)
      return { state: "empty" };
    if ("empty" === o3.state || "loading" === o3.state)
      return o3;
    if ("cached" === o3.state) {
      if (!I(o3))
        return o3;
      if (!y(o3))
        return await a2(r5, s3), { state: "empty" };
      o3 = { state: "stale", createdAt: o3.createdAt, data: o3.data, ttl: void 0 !== o3.staleTtl ? o3.staleTtl + o3.ttl : void 0 }, await e3(r5, o3, s3);
    }
    return I(o3) ? w(o3) ? o3 : (await a2(r5, s3), { state: "empty" }) : o3;
  } };
}
function b(e3 = false, t3 = false, a2 = false) {
  const r5 = S({ set: (e4, t4) => {
    if (a2) {
      let e5 = Object.keys(r5.data);
      if (e5.length >= a2)
        for (r5.cleanup(), e5 = Object.keys(r5.data); e5.length >= a2; )
          delete r5.data[e5.shift()];
    }
    r5.data[e4] = t4;
  }, remove: (e4) => {
    delete r5.data[e4];
  }, find: (t4) => {
    const a3 = r5.data[t4];
    return e3 && void 0 !== a3 ? "function" == typeof structuredClone ? structuredClone(a3) : JSON.parse(JSON.stringify(a3)) : a3;
  } });
  return r5.data = /* @__PURE__ */ Object.create(null), r5.cleanup = () => {
    const e4 = Object.keys(r5.data);
    let t4, a3, s3 = -1;
    for (; ++s3 < e4.length; )
      a3 = e4[s3], t4 = r5.data[a3], "empty" !== t4.state ? "cached" === t4.state && I(t4) && !y(t4) && r5.remove(a3) : r5.remove(a3);
  }, t3 && (r5.cleaner = setInterval(r5.cleanup, t3)), r5;
}
var x = ((e3) => {
  var t3 = {};
  return r4.d(t3, e3), t3;
})({ hash: () => t2 });
var C = /^\/|\/$/g;
function A(e3) {
  return (t3) => {
    if (t3.id)
      return t3.id;
    const a2 = e3(t3);
    return "string" == typeof a2 || "number" == typeof a2 ? `${a2}` : `${(0, x.hash)(a2)}`;
  };
}
var E = A(({ baseURL: e3 = "", url: t3 = "", method: a2 = "get", params: r5, data: s3 }) => (e3 && (e3 = e3.replace(C, "")), t3 && (t3 = t3.replace(C, "")), a2 && (a2 = a2.toLowerCase()), { url: e3 + (e3 && t3 ? "/" : "") + t3, params: r5, method: a2, data: s3 }));
function O(e3, t3 = {}) {
  var a2, r5, s3, o3, n3, c3;
  const d3 = e3;
  if (d3.defaults.cache)
    throw new Error("setupCache() should be called only once");
  if (d3.storage = t3.storage || b(), !m(d3.storage))
    throw new Error("Use buildStorage() function");
  return d3.waiting = t3.waiting || {}, d3.generateKey = t3.generateKey || E, d3.headerInterpreter = t3.headerInterpreter || i, d3.requestInterceptor = t3.requestInterceptor || h(d3), d3.responseInterceptor = t3.responseInterceptor || v(d3), d3.debug = t3.debug, d3.defaults.cache = { update: t3.update || {}, ttl: null !== (a2 = t3.ttl) && void 0 !== a2 ? a2 : 3e5, methods: t3.methods || ["get", "head"], cachePredicate: t3.cachePredicate || { statusCheck: (e4) => [200, 203, 300, 301, 302, 404, 405, 410, 414, 501].includes(e4) }, etag: null === (r5 = t3.etag) || void 0 === r5 || r5, modifiedSince: null !== (s3 = t3.modifiedSince) && void 0 !== s3 ? s3 : false === t3.etag, interpretHeader: null === (o3 = t3.interpretHeader) || void 0 === o3 || o3, cacheTakeover: null === (n3 = t3.cacheTakeover) || void 0 === n3 || n3, staleIfError: null === (c3 = t3.staleIfError) || void 0 === c3 || c3, override: false, hydrate: void 0 }, d3.requestInterceptor.apply(), d3.responseInterceptor.apply(), d3;
}
function T(e3, t3 = "axios-cache-") {
  return S({ find: (a2) => {
    const r5 = e3.getItem(t3 + a2);
    return r5 ? JSON.parse(r5) : void 0;
  }, remove: (a2) => {
    e3.removeItem(t3 + a2);
  }, set: (a2, r5) => {
    const s3 = () => e3.setItem(t3 + a2, JSON.stringify(r5));
    try {
      return s3();
    } catch (r6) {
      const o3 = Object.entries(e3).filter((e4) => e4[0].startsWith(t3)).map((e4) => [e4[0], JSON.parse(e4[1])]);
      for (const t4 of o3)
        "cached" === t4[1].state && I(t4[1]) && !y(t4[1]) && e3.removeItem(t4[0]);
      try {
        return s3();
      } catch (t4) {
        const a3 = o3.sort((e4, t5) => (e4[1].createdAt || 0) - (t5[1].createdAt || 0));
        for (const t5 of a3) {
          e3.removeItem(t5[0]);
          try {
            return s3();
          } catch (e4) {
          }
        }
      }
      e3.removeItem(t3 + a2);
    }
  } });
}
var j = s2.h4;
var k = s2.UN;
var M = s2.uu;
var N = s2.Kd;
var L = s2.ZF;
var K = s2.nv;
var D = s2.p;
var P = s2.E7;
var X = s2.NQ;
var J = s2.xK;
var R = s2.G6;
var U = s2.LN;
var q = s2.Bw;
var H = s2.Ad;
var $ = s2.$k;
var F = s2.v8;
var G = s2.Jk;
var W = s2.tI;
var B = s2.iS;

// node_modules/pokenode-ts/lib/index.mjs
var l2 = Object.defineProperty;
var i2 = (A2, e3) => l2(A2, "name", { value: e3, configurable: true });
var f2 = (A2, e3) => {
  for (var a2 in e3)
    l2(A2, a2, { get: e3[a2], enumerable: true });
};
var w2 = {};
f2(w2, { BERRIES: () => W2, BERRY_FIRMNESSES: () => v2, BERRY_FLAVORS: () => k2, BaseURL: () => O2, CONTEST_TYPES: () => b2, EGG_GROUPS: () => At, ENCOUNTER_CONDITIONS: () => J2, ENCOUNTER_CONDITION_VALUES: () => Q, ENCOUNTER_METHODS: () => X2, ENDPOINTS: () => n2, EVOLUTION_TRIGGERS: () => q2, GENDERS: () => Ot, GENERATIONS: () => Z, GROWTH_RATES: () => ct, ITEM_ATTRIBUTES: () => Pt, ITEM_CATEGORIES: () => mt, ITEM_FLING_EFFECTS: () => gt, ITEM_POCKETS: () => pt, LANGUAGES: () => _t, MOVE_AILMENTS: () => Et, MOVE_BATTLE_STYLES: () => st, MOVE_CATEGORIES: () => nt, MOVE_DAMAGE_CLASSES: () => rt, MOVE_LEARN_METHODS: () => it, MOVE_TARGETS: () => ot, NATURES: () => Rt, PAL_PARK_AREAS: () => at, POKEATHLON_STATS: () => Tt, POKEDEXES: () => j2, POKEMON_COLORS: () => Nt, POKEMON_HABITATS: () => ht, POKEMON_SHAPES: () => It, REGIONS: () => et, STATS: () => Lt, TYPES: () => St, VERSIONS: () => z, VERSION_GROUPS: () => tt });
var O2;
(function(A2) {
  A2.REST = "https://pokeapi.co/api/v2";
})(O2 || (O2 = {}));
var n2 = { BERRY: "/berry", BERRY_FIRMNESS: "/berry-firmness", BERRY_FLAVOR: "/berry-flavor", CONTEST_TYPE: "/contest-type", CONTEST_EFFECT: "/contest-effect", SUPER_CONTEST_EFFECT: "/super-contest-effect", ENCOUNTER_METHOD: "/encounter-method", ENCOUNTER_CONDITION: "/encounter-condition", ENCOUNTER_CONDITION_VALUE: "/encounter-condition-value", EVOLUTION_CHAIN: "/evolution-chain", EVOLUTION_TRIGGER: "/evolution-trigger", GENERATION: "/generation", POKEDEX: "/pokedex", VERSION: "/version", VERSION_GROUP: "/version-group", ITEM: "/item", ITEM_ATTRIBUTE: "/item-attribute", ITEM_CATEGORY: "/item-category", ITEM_FLING_EFFECT: "/item-fling-effect", ITEM_POCKET: "/item-pocket", LOCATION: "/location", LOCATION_AREA: "/location-area", PALPARK_AREA: "/pal-park-area", REGION: "/region", MACHINE: "/machine", MOVE: "/move", MOVE_AILMENT: "/move-ailment", MOVE_BATTLE_STYLE: "/move-battle-style", MOVE_CATEGORY: "/move-category", MOVE_DAMAGE_CLASS: "/move-damage-class", MOVE_LEARN_METHOD: "/move-learn-method", MOVE_TARGET: "/move-target", ABILITY: "/ability", CHARACTERISTIC: "/characteristic", EGG_GROUP: "/egg-group", GENDER: "/gender", GROWTH_RATE: "/growth-rate", NATURE: "/nature", POKEATHLON_STAT: "/pokeathlon-stat", POKEMON: "/pokemon", POKEMON_LOCATION_AREA: "/pokemon/:id/encounters", POKEMON_COLOR: "/pokemon-color", POKEMON_FORM: "/pokemon-form", POKEMON_HABITAT: "/pokemon-habitat", POKEMON_SHAPE: "/pokemon-shape", POKEMON_SPECIES: "/pokemon-species", STAT: "/stat", TYPE: "/type", LANGUAGE: "/language" };
var W2 = { CHERI: 1, CHESTO: 2, PECHA: 3, RAWST: 4, ASPEAR: 5, LEPPA: 6, ORAN: 7, PERSIM: 8, LUM: 9, SITRUS: 10, FIGY: 11, WIKI: 12, MAGO: 13, AGUAV: 14, IAPAPA: 15, RAZZ: 16, BLUK: 17, NANAB: 18, WEPEAR: 19, PINAP: 20, POMEG: 21, KELPSY: 22, QUALOT: 23, HONDEW: 24, GREPA: 25, TAMATO: 26, CORNN: 27, MAGOST: 28, RABUTA: 29, NOMEL: 30, SPELON: 31, PAMTRE: 32, WATMEL: 33, DURIN: 34, BELUE: 35, OCCA: 36, PASSHO: 37, WACAN: 38, RINDO: 39, YACHE: 40, CHOPLE: 41, KEBIA: 42, SHUCA: 43, COBA: 44, PAYAPA: 45, TANGA: 46, CHARTI: 47, KASIB: 48, HABAN: 49, COLBUR: 50, BABIRI: 51, CHILAN: 52, LIECHI: 53, GANLON: 54, SALAC: 55, PETAYA: 56, APICOT: 57, LANSAT: 58, STARF: 59, ENIGMA: 60, MICLE: 61, CUSTAP: 62, JABOCA: 63, ROWAP: 64 };
var v2 = { VERY_SOFT: 1, SOFT: 2, HARD: 3, VERY_HARD: 4, SUPER_HARD: 5 };
var k2 = { SPICY: 1, DRY: 2, SWEET: 3, BITTER: 4, SOUR: 5 };
var b2 = { COOL: 1, BEAUTY: 2, CUTE: 3, SMART: 4, TOUGH: 5 };
var X2 = { WALK: 1, OLD_ROD: 2, GOOD_ROD: 3, SUPER_ROD: 4, SURF: 5, ROCK_SMASH: 6, HEADBUTT: 7, DARK_GRASS: 8, GRASS_SPOTS: 9, CAVE_SPOTS: 10, BRIDGE_SPOTS: 11, SUPER_ROD_SPOTS: 12, SURF_SPOTS: 13, YELLOW_FLOWERS: 14, PURPLE_FLOWERS: 15, RED_FLOWERS: 16, ROUGH_TERRAIN: 17, GIFT: 18, GIFT_EGG: 19, ONLY_ONE: 20, POKEFLUTE: 21, HEADBUTT_LOW: 22, HEADBUTT_NORMAL: 23, HEADBUT_HIGH: 24, SQUIRT_BOTTLE: 25, WAILMER_PAIL: 26, SEAWEED: 27 };
var J2 = { SWARM: 1, TIME: 2, RADAR: 3, SLOT2: 4, RADIO: 5, SEASON: 6, STARTER: 7, TV_OPTION: 8, STORY_PROGRESS: 9, OTHER: 10 };
var Q = { SWARM_YES: 1, SWARM_NO: 2, TIME_MORNING: 3, TIME_DAY: 4, TIME_NIGHT: 5, RADAR_ON: 6, RADAR_OFF: 7, SLOT2_NONE: 8, SLOT2_RUBY: 9, SLOT2_SAPHIRE: 10, SLOT2_EMERALD: 11, SLOT2_FIRERED: 12, SLOT2_LEAFGREEN: 13, RADIO_OFF: 14, RADIO_HOEN: 15, RADIO_SINNOH: 16, SEASON_SPRING: 17, SEASON_SUMMER: 18, SWASON_AUTUMN: 19, SEASON_WINTER: 20, STARTER_BULBASAUR: 21, STARTER_SQUIRTLE: 22, STARTER_CHARMANDER: 23, STARTER_CHESPIN: 24, STARTER_FENNEKIN: 25, STARTER_FROAKIE: 26, TV_OPTION_BLUE: 27, TV_OPTION_RED: 28, STORY_PROGRESS_AWAKENED_BEASTS: 29, STORY_PROGRESS_BEAT_GALACTIC_CORONET: 30, STORY_PROGRESS_OAK_ETERNA_CITY: 31, STORY_PROGRESS_OAK_VERMILION_COPYCAT: 32, STORY_PROGRESS_MET_TORNADUS_THUNDURUS: 33, STORY_PROGRESS_BEAT_ELITE_FOUR_ROUND_TWO: 34, STORY_PROGRESS_HALL_OF_FAME: 35, STORY_PROGRESS_NONE: 36, STORY_PROGRESS_NATIONAL_DEX: 37, OTHER_NONE: 38, OTHER_SNORLAX_LL_BEAT_LEAGUE: 39 };
var q2 = { LEVEL_UP: 1, TRADE: 2, USE_ITEM: 3, SHED: 4, SPIN: 5, TOWER_OF_DARKNESS: 6, TOWER_OF_WATER: 7, THREE_CRITICAL_HITS: 8, TAKE_DAMAGE: 9, OTHER: 10 };
var Z = { GENERATION_I: 1, GENERATION_II: 2, GENERATION_III: 3, GENERATION_IV: 4, GENERATION_V: 5, GENERATION_VI: 6, GENERATION_VII: 7, GENERATION_VIII: 8 };
var j2 = { NATIONAL: 1, KANTO: 2, ORIGINAL_JOHTO: 3, HOENN: 4, ORIGINAL_SINNOH: 5, EXTENDED_SINNOH: 6, UPDATED_JOHTO: 7, ORIGINAL_UNOVA: 8, UPDATED_UNOVA: 9, CONQUEST_GALLERY: 11, KALOS_CENTRAL: 12, KALOS_COASTAL: 13, KALOS_MONTAIN: 14, UPDATED_HOENN: 15, ORIGINAL_ALOLA: 16, ORIGINAL_MELEMELE: 17, ORIGINAL_AKALA: 18, ORIGINAL_ULAULA: 19, ORIGINAL_PONI: 20, UPDATED_ALOLA: 21, UPDATED_MELEMELE: 22, UPDATED_AKALA: 23, UPDATED_ULAULA: 24, UPDATED_PONI: 25, UPDATED_KANTO: 26, GALAR: 27, ISLE_OF_ARMOR: 28, CROWN_TUNDRA: 29 };
var z = { RED: 1, BLUE: 2, YELLOW: 3, GOLD: 4, SILVER: 5, CRYSTAL: 6, RUBY: 7, SAPPHIRE: 8, EMERALD: 9, FIRERED: 10, LEAFGREEN: 11, DIAMOND: 12, PEARL: 13, PLATINUM: 14, HEARTGOLD: 15, SOULSILVER: 16, BLACK: 17, WHITE: 18, COLOSSEUM: 19, XD: 20, BLACK_2: 21, WHITE_2: 22, X: 23, Y: 24, OMEGA_RUBY: 25, ALPHA_SAPPHIRE: 26, SUN: 27, MOON: 28, ULTRA_SUN: 29, ULTRA_MOON: 30, LETS_GO_PIKACHU: 31, LETS_GO_EEVEE: 32, SWORD: 33, SHIELD: 34, THE_ISLE_OF_ARMOR: 35, THE_CROWN_TUNDRA: 36, BRILLIANT_DIAMOND: 37, SHINING_PEARL: 38, LEGENDS_ARCEUS: 39 };
var tt = { RED_BLUE: 1, YELLOW: 2, GOLD_SILVER: 3, CRYSTAL: 4, RUBY_SAPPHIRE: 5, EMERALD: 6, FIRERED_LEAFGREEN: 7, DIAMOND_PEARL: 8, PLATINUM: 9, HEARTGOLD_SOULSILVER: 10, BLACK_WHITE: 11, COLOSSEUM: 12, XD: 13, BLACK_2_WHITE_2: 14, X_Y: 15, OMEGA_RUBY_ALPHA_SAPPHIRE: 16, SUN_MOON: 17, ULTRA_SUN_ULTRA_MOON: 18, LETS_GO: 19, SWORD_SHIELD: 20, THE_ISLE_OF_ARMOR: 21, THE_CROWN_TUNDRA: 22, BRILLIANT_DIAMOND_AND_SHINING_PEARL: 23, LEGENDS_ARCEUS: 24 };
var et = { KANTO: 1, JOHTO: 2, HOENN: 3, SINNOH: 4, UNOVA: 5, KALOS: 6, ALOLA: 7, GALAR: 8, HISUI: 9 };
var at = { FOREST: 1, FIELD: 2, MOUNTAIN: 3, POND: 4, SEA: 5 };
var Et = { UNKNOWN: -1, NONE: 0, PARALYSIS: 1, SLEEP: 2, FREEZE: 3, BURN: 4, POISON: 5, CONFUSION: 6, INFATUATION: 7, TRAP: 8, NIGHTMARE: 9, TORMENT: 12, DISABLE: 13, YAWN: 14, HEAL_BLOCK: 15, NO_TYPE_IMMUNITY: 17, LEECH_SEED: 18, EMBARGO: 19, PERISH_SONG: 20, INGRAIN: 21, SILENCE: 24, TAR_SHOT: 42 };
var st = { ATTACK: 1, DEFENSE: 2, SUPPORT: 3 };
var nt = { DAMAGE: 0, AILMENT: 1, NET_GOOD_STATS: 2, HEAL: 3, DAMAGE_AILMENT: 4, SWAGGER: 5, DAMAGE_LOWER: 6, DAMAGE_RAISE: 7, DAMAGE_HEAL: 8, OHKO: 9, WHOLE_FIELD_EFFECT: 10, FIELD_EFFECT: 11, FORCE_SWITCH: 12, UNIQUE: 13 };
var rt = { STATUS: 1, PHYSICAL: 2, SPECIAL: 3 };
var it = { LEVEL_UP: 1, EGG: 2, TUTOR: 3, MACHINE: 4, STADIUM_SURFING_PIKACHU: 5, LIGHT_BALL_EGG: 6, COLOSSEUM_PURIFICATION: 7, XD_SHADOW: 8, XD_PURIFICATION: 9, FORM_CHANGE: 10 };
var ot = { SPECIFIC_MOVE: 1, SELECTED_POKEMON_ME_FIRST: 2, ALLY: 3, USERS_FIELD: 4, USER_OR_ALLY: 5, OPPONENTS_FIELD: 6, USER: 7, RANDOM_OPPONENT: 8, ALL_OTHER_POKEMON: 9, SELECTED_POKEMON: 10, ALL_OPPONENTS: 11, ENTIRE_FIELD: 12, USER_AND_ALIES: 13, ALL_POKEMON: 14, ALL_ALLIES: 15 };
var At = { MONSTER: 1, WATER1: 2, BUG: 3, FLYING: 4, GROUND: 5, FAIRY: 6, PLANT: 7, HUMANSHAPE: 8, WATER3: 9, MINERAL: 10, INDETERMINATE: 11, WATER2: 12, DITTO: 13, DRAGON: 14, NO_EGGS: 15 };
var Ot = { FEMALE: 1, MALE: 2, GENDERLESS: 3 };
var ct = { SLOW: 1, MEDIUM: 2, FAST: 3, MEDIUM_SLOW: 4, SLOW_THEN_VERY_FAST: 5, FAST_THEN_VERY_SLOW: 6 };
var Rt = { HARDY: 1, BOLD: 2, MODEST: 3, CALM: 4, TIMID: 5, LONELY: 6, DOCILE: 7, MILD: 8, GENTLE: 9, HASTY: 10, ADAMANT: 11, IMPISH: 12, BASHFUL: 13, CAREFUL: 14, RASH: 15, JOLLY: 16, NAUGHTY: 17, LAX: 18, QUIRKY: 19, NAIVE: 20, BRAVE: 21, RELAXED: 22, QUIET: 23, SASSY: 24, SERIOUS: 25 };
var Tt = { SPEED: 1, POWER: 2, SKILL: 3, STAMINA: 4, JUMP: 5 };
var Nt = { BLACK: 1, BLUE: 2, BROWN: 3, GRAY: 4, GREEN: 5, PINK: 6, PURPLE: 7, RED: 8, WHITE: 9, YELLOW: 10 };
var ht = { CAVE: 1, FOREST: 2, GRASSLAND: 3, MONTAIN: 4, RARE: 5, ROUGH_TERRAIN: 6, SEA: 7, URBAN: 8, WATERS_EDGE: 9 };
var It = { BALL: 1, SQUIGGLE: 2, FISH: 3, ARMS: 4, BLOB: 5, UPRIGHT: 6, LEGS: 7, QUADRUPED: 8, WINGS: 9, TENTACLES: 10, HEADS: 11, HUMANOID: 12, BUG_WINGS: 13, ARMOR: 14 };
var Lt = { HP: 1, ATTACK: 2, DEFENSE: 3, SPECIAL_ATTACK: 4, SPECIAL_DEFENSE: 5, SPEED: 6, ACCURACY: 7, EVASION: 8 };
var St = { NORMAL: 1, FIGHTING: 2, FLYING: 3, POISON: 4, GROUND: 5, ROCK: 6, BUG: 7, GHOST: 8, STEEL: 9, FIRE: 10, WATER: 11, GRASS: 12, ELECTRIC: 13, PSYCHIC: 14, ICE: 15, DRAGON: 16, DARK: 17, FAIRY: 18, UNKNOWN: 10001, SHADOW: 10002 };
var _t = { JA_HRKT: 1, ROOMAJI: 2, KO: 3, ZH_HANT: 4, FR: 5, DE: 6, ES: 7, IT: 8, EN: 9, CS: 10, JA: 11, ZH_HANS: 12, PT_BR: 13 };
var Pt = { COUNTABLE: 1, CONSUMABLE: 2, USABLE_OVERWORLD: 3, USABLE_IN_BATTLE: 4, HOLDABLE: 5, HOLDABLE_PASSIVE: 6, HOLDABLE_ACTIVE: 7, UNDERGROUND: 8 };
var mt = { STAT_BOOSTS: 1, EFFORT_DROP: 2, MEDICINE: 3, OTHER: 4, IN_A_PINCH: 5, PICKY_HEALING: 6, TYPE_PROTECTION: 7, BAKING_ONLY: 8, COLLECTIBLES: 9, EVOLUTION: 10, SPELUNKING: 11, HELD_ITEMS: 12, CHOICE: 13, EFFORT_TRAINING: 14, BAD_HELD_ITEMS: 15, TRAINING: 16, PLATES: 17, SPECIES_SPECIFIC: 18, TYPE_ENHANCEMENT: 19, EVENT_ITEMS: 20, GAMEPLAY: 21, PLOT_ADVANCEMENT: 22, UNUSED: 23, LOOT: 24, ALL_MAIL: 25, VITAMINS: 26, HEALING: 27, PP_RECOVERY: 28, REVIVAL: 29, STATUS_CURES: 30, MULCH: 32, SPECIAL_BALLS: 33, STANDARD_BALLS: 34, DEX_COMPLETION: 35, SCARVES: 36, ALL_MACHINES: 37, FLUTES: 38, APRICORN_BALLS: 39, APRICORN_BOX: 40, DATA_CARDS: 41, JEWELS: 42, MIRACLE_SHOOTER: 43, MEGA_STONES: 44, MEMORIES: 45, Z_CRYSTALS: 46, SPECIES_CANDIES: 47, CATCHING_BONUS: 48, DYNAMAX_CRISTALS: 49, NATURE_MINTS: 50, CURRY_INGREDIENTS: 51 };
var gt = { BADLY_POISON: 1, BURN: 2, BERRY_EFFECT: 3, HERB_EFFECT: 4, PARALYZE: 5, POISON: 6, FLINCH: 7 };
var pt = { MISC: 1, MEDICINE: 2, POKEBALLS: 3, MACHINES: 4, BERRIES: 5, MAIL: 6, BATTLE: 7, KEY: 8 };
var F2 = i2((A2, e3) => {
  var _a;
  return e3 && console.log(`[ Request Config ] ${((_a = A2.method) == null ? void 0 : _a.toUpperCase()) || ""} | ${A2.url || ""}`), A2;
}, "handleRequest");
var Y = i2((A2, e3) => (e3 && console.error(`[ Request Error ] CODE ${A2.code || "UNKNOWN"} | ${A2.message}`), Promise.reject(A2)), "handleRequestError");
var V = i2((A2, e3) => (e3 && console.log(`[ Response ] STATUS ${A2.status} | ${A2.cached ? "CACHED" : "NOT CACHED"}`), A2), "handleResponse");
var K2 = i2((A2, e3) => (e3 && console.error(`[ Response Error ] CODE ${A2.code || "UNKNOWN"} | ${A2.message}`), Promise.reject(A2)), "handleResponseError");
var g2 = class {
  constructor(e3) {
    __publicField(this, "api");
    this.api = F(axios_default.create({ baseURL: (e3 == null ? void 0 : e3.baseURL) ?? O2.REST, headers: { "Content-Type": "application/json" } }), e3 == null ? void 0 : e3.cacheOptions), this.api.interceptors.request.use((a2) => F2(a2, e3 == null ? void 0 : e3.logs), (a2) => Y(a2, e3 == null ? void 0 : e3.logs)), this.api.interceptors.response.use((a2) => V(a2, e3 == null ? void 0 : e3.logs), (a2) => K2(a2, e3 == null ? void 0 : e3.logs));
  }
  getListURL(e3, a2, E2) {
    return `${e3}?offset=${a2 ?? 0}&limit=${E2 ?? 20}`;
  }
};
var o2 = g2;
i2(g2, "BaseClient");
var p2 = class extends o2 {
  async getBerryByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getBerryById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getBerryFirmnessById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY_FIRMNESS}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getBerryFirmnessByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY_FIRMNESS}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getBerryFlavorById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY_FLAVOR}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getBerryFlavorByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.BERRY_FLAVOR}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  listBerries(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.BERRY, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  listBerryFirmnesses(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.BERRY_FIRMNESS, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  listBerryFlavors(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.BERRY_FLAVOR, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var c2 = p2;
i2(p2, "BerryClient");
var M2 = class extends o2 {
  async getContestTypeByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.CONTEST_TYPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getContestTypeById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.CONTEST_TYPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getContestEffectById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.CONTEST_EFFECT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getSuperContestEffectById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.SUPER_CONTEST_EFFECT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listContestTypes(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.CONTEST_TYPE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listContestEffects(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.CONTEST_EFFECT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listSuperContestEffects(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.SUPER_CONTEST_EFFECT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var R2 = M2;
i2(M2, "ContestClient");
var C2 = class extends o2 {
  async getEncounterMethodByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_METHOD}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEncounterMethodById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_METHOD}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEncounterConditionById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_CONDITION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEncounterConditionByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_CONDITION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEncounterConditionValueByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_CONDITION_VALUE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEncounterConditionValueById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ENCOUNTER_CONDITION_VALUE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listEncounterMethods(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ENCOUNTER_METHOD, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listEncounterConditions(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ENCOUNTER_CONDITION, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listEncounterConditionValues(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ENCOUNTER_CONDITION_VALUE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var T2 = C2;
i2(C2, "EncounterClient");
var U2 = class extends o2 {
  async getEvolutionChainById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.EVOLUTION_CHAIN}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEvolutionTriggerById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.EVOLUTION_TRIGGER}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEvolutionTriggerByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.EVOLUTION_TRIGGER}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listEvolutionChains(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.EVOLUTION_CHAIN, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listEvolutionTriggers(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.EVOLUTION_TRIGGER, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var N2 = U2;
i2(U2, "EvolutionClient");
var y2 = class extends o2 {
  async getGenerationByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GENERATION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getGenerationById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GENERATION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokedexByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEDEX}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokedexById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEDEX}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getVersionByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.VERSION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getVersionById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.VERSION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getVersionGroupByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.VERSION_GROUP}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getVersionGroupById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.VERSION_GROUP}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listGenerations(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.GENERATION, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokedexes(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEDEX, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listVersions(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.VERSION, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listVersionGroups(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.VERSION_GROUP, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var h2 = y2;
i2(y2, "GameClient");
var u2 = class extends o2 {
  async getItemByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemAttributeByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_ATTRIBUTE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemAttributeById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_ATTRIBUTE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemCategoryByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_CATEGORY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemCategoryById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_CATEGORY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemFlingEffectByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_FLING_EFFECT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemFlingEffectById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_FLING_EFFECT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemPocketByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_POCKET}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getItemPocketById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ITEM_POCKET}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listItems(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ITEM, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listItemAttributes(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ITEM_ATTRIBUTE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listItemCategories(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ITEM_CATEGORY, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listItemFilingEffects(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ITEM_FLING_EFFECT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listItemPockets(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ITEM_POCKET, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var I2 = u2;
i2(u2, "ItemClient");
var d2 = class extends o2 {
  async getLocationByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LOCATION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getLocationById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LOCATION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getLocationAreaByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LOCATION_AREA}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getLocationAreaById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LOCATION_AREA}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPalParkAreaByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.PALPARK_AREA}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPalParkAreaById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.PALPARK_AREA}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getRegionByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.REGION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getRegionById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.REGION}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listLocations(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.LOCATION, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listLocationAreas(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.LOCATION_AREA, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPalParkAreas(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.PALPARK_AREA, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listRegions(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.REGION, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var L2 = d2;
i2(d2, "LocationClient");
var B2 = class extends o2 {
  async getMachineById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MACHINE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listMachines(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MACHINE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var S2 = B2;
i2(B2, "MachineClient");
var G2 = class extends o2 {
  async getMoveByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveAilmentByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_AILMENT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveAilmentById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_AILMENT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveBattleStyleByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_BATTLE_STYLE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveBattleStyleById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_BATTLE_STYLE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveCategoryByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_CATEGORY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveCategoryById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_CATEGORY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveDamageClassByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_DAMAGE_CLASS}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveDamageClassById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_DAMAGE_CLASS}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveLearnMethodByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_LEARN_METHOD}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveLearnMethodById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_LEARN_METHOD}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveTargetByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_TARGET}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getMoveTargetById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.MOVE_TARGET}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listMoves(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveAilments(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_AILMENT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveBattleStyles(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_BATTLE_STYLE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveCategories(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_CATEGORY, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveDamageClasses(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_DAMAGE_CLASS, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveLearnMethods(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_LEARN_METHOD, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listMoveTargets(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.MOVE_TARGET, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var _ = G2;
i2(G2, "MoveClient");
var D2 = class extends o2 {
  async getAbilityByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ABILITY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getAbilityById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.ABILITY}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getCharacteristicById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.CHARACTERISTIC}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEggGroupByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.EGG_GROUP}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getEggGroupById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.EGG_GROUP}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getGenderByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GENDER}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getGenderById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GENDER}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getGrowthRateByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GROWTH_RATE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getGrowthRateById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.GROWTH_RATE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getNatureByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.NATURE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getNatureById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.NATURE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokeathlonStatByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEATHLON_STAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokeathlonStatById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEATHLON_STAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonLocationAreaById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_LOCATION_AREA.replace(":id", e3.toString())}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonColorByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_COLOR}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonColorById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_COLOR}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonFormByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_FORM}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonFormById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_FORM}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonHabitatByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_HABITAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonHabitatById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_HABITAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonShapeByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_SHAPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonShapeById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_SHAPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonSpeciesByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_SPECIES}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getPokemonSpeciesById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.POKEMON_SPECIES}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getStatByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.STAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getStatById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.STAT}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getTypeByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.TYPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getTypeById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.TYPE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async listAbilities(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.ABILITY, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listCharacteristics(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.CHARACTERISTIC, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listEggGroups(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.EGG_GROUP, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listGenders(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.GENDER, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listGrowthRates(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.GROWTH_RATE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listNatures(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.NATURE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokeathlonStats(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEATHLON_STAT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemons(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemonColors(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON_COLOR, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemonForms(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON_FORM, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemonHabitats(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON_HABITAT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemonShapes(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON_SHAPE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listPokemonSpecies(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.POKEMON_SPECIES, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listStats(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.STAT, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
  async listTypes(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.TYPE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var P2 = D2;
i2(D2, "PokemonClient");
var $2 = class extends o2 {
  async getLanguageById(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LANGUAGE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getLanguageByName(e3) {
    return new Promise((a2, E2) => {
      this.api.get(`${n2.LANGUAGE}/${e3}`).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  async getResourceByUrl(e3) {
    return new Promise((a2, E2) => {
      this.api.get(e3, { baseURL: "" }).then((t3) => a2(t3.data)).catch((t3) => E2(t3));
    });
  }
  listLanguages(e3, a2) {
    return new Promise((E2, t3) => {
      let r5 = this.getListURL(n2.LANGUAGE, e3, a2);
      this.api.get(r5).then((s3) => E2(s3.data)).catch((s3) => t3(s3));
    });
  }
};
var m2 = $2;
i2($2, "UtilityClient");
var H2 = class extends o2 {
  constructor(e3) {
    super(e3);
    __publicField(this, "berry");
    __publicField(this, "contest");
    __publicField(this, "encounter");
    __publicField(this, "evolution");
    __publicField(this, "game");
    __publicField(this, "item");
    __publicField(this, "location");
    __publicField(this, "machine");
    __publicField(this, "move");
    __publicField(this, "pokemon");
    __publicField(this, "utility");
    this.berry = new c2(e3), this.contest = new R2(e3), this.encounter = new T2(e3), this.evolution = new N2(e3), this.game = new h2(e3), this.item = new I2(e3), this.location = new L2(e3), this.machine = new S2(e3), this.move = new _(e3), this.pokemon = new P2(e3), this.utility = new m2(e3);
  }
};
var x2 = H2;
i2(H2, "MainClient");
export {
  W2 as BERRIES,
  v2 as BERRY_FIRMNESSES,
  k2 as BERRY_FLAVORS,
  o2 as BaseClient,
  O2 as BaseURL,
  c2 as BerryClient,
  b2 as CONTEST_TYPES,
  w2 as Constants,
  R2 as ContestClient,
  At as EGG_GROUPS,
  J2 as ENCOUNTER_CONDITIONS,
  Q as ENCOUNTER_CONDITION_VALUES,
  X2 as ENCOUNTER_METHODS,
  n2 as ENDPOINTS,
  q2 as EVOLUTION_TRIGGERS,
  T2 as EncounterClient,
  N2 as EvolutionClient,
  Ot as GENDERS,
  Z as GENERATIONS,
  ct as GROWTH_RATES,
  h2 as GameClient,
  Pt as ITEM_ATTRIBUTES,
  mt as ITEM_CATEGORIES,
  gt as ITEM_FLING_EFFECTS,
  pt as ITEM_POCKETS,
  I2 as ItemClient,
  _t as LANGUAGES,
  L2 as LocationClient,
  Et as MOVE_AILMENTS,
  st as MOVE_BATTLE_STYLES,
  nt as MOVE_CATEGORIES,
  rt as MOVE_DAMAGE_CLASSES,
  it as MOVE_LEARN_METHODS,
  ot as MOVE_TARGETS,
  S2 as MachineClient,
  x2 as MainClient,
  _ as MoveClient,
  Rt as NATURES,
  at as PAL_PARK_AREAS,
  Tt as POKEATHLON_STATS,
  j2 as POKEDEXES,
  Nt as POKEMON_COLORS,
  ht as POKEMON_HABITATS,
  It as POKEMON_SHAPES,
  P2 as PokemonClient,
  et as REGIONS,
  Lt as STATS,
  St as TYPES,
  m2 as UtilityClient,
  z as VERSIONS,
  tt as VERSION_GROUPS
};
//# sourceMappingURL=pokenode-ts.js.map
